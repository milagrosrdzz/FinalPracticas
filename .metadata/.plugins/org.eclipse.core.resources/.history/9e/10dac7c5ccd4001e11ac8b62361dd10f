package com.AppConvert.backAppConvert.modeloDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import com.AppConvert.backAppConvert.interfaces.ProductoInterface;
import com.AppConvert.backAppConvert.modelo.Producto;
import com.AppConvert.backAppConvert.service.ProductoService;

@Repository
@Transactional
public class ProductoDAO implements ProductoInterface{

	@Autowired
	JdbcTemplate template;
	
	@PersistenceContext
	private EntityManager entityManager;
	
	@Override
	public List<Map<String, Object>> listar() {
		List<Map<String, Object>> list = template.queryForList("select * from producto");
		return list;
	}
	
	@Transactional
	@Override
	public int add(Producto p) {
	    String sql = "insert into producto(nombre,cantidad, cantidad_total)values(?,?,?)";
	    KeyHolder keyHolder = new GeneratedKeyHolder();
	    
	    int affectedRows = template.update(new PreparedStatementCreator() {
	        @Override
	        public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
	            PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
	            ps.setString(1, p.getNombre());
	            ps.setInt(2, p.getCantidad());
	            ps.setInt(3, p.getCantidad_total());
	            return ps;
	        }
	    }, keyHolder);

	    if (affectedRows > 0) {
	        // Obtener el ID generado
	        Number id = keyHolder.getKey();
	        if (id != null) {
	            return id.intValue();
	        }
	    }
	    
	    return 0; // O algún valor que indique que no se pudo obtener el ID
	}

	@Override
	public int edit(Producto p) {
		String sql = "update producto set nombre=?, cantidad=? where id_producto=?";
		return template.update(sql,p.getNombre(),p.getCantidad());
	}

	@Override
	public long delete(long id_producto) {
		String sql="delete from producto where id_producto=?";
		return template.update(sql,id_producto);
	}

	@Override
	public List<Map<String, Object>> listarId(int id_usuario) {
		// TODO Auto-generated method stub
		return null;
	}

	 @Transactional
	    public Producto save(Producto producto) {
	        if (producto.getId_producto() == null) {
	            // Nuevo producto, realiza una inserción en la base de datos
	            entityManager.persist(producto);
	        } else {
	            // Producto existente, realiza una actualización en la base de datos
	            producto = entityManager.merge(producto);
	        }
	        return producto;
	    }

	    @Override
	    public Optional<Producto> findById(Long id) {
	        String sql = "SELECT * FROM producto WHERE id_producto = ?";
	        try {
	            System.out.println("Ejecutando query para obtener producto por ID: " + id);
	            Producto producto = template.queryForObject(sql, new Object[]{id}, (rs, rowNum) -> {
	                Producto p = new Producto();
	                p.setId_producto(rs.getLong("id_producto"));
	                p.setNombre(rs.getString("nombre"));
	                p.setCantidad(rs.getInt("cantidad"));
	                p.setCantidad_total(rs.getInt("cantidad_total"));
	                System.out.println("Producto encontrado: " + p.toString());
	                return p;
	            });
	            return Optional.ofNullable(producto);
	        } catch (EmptyResultDataAccessException e) {
	            System.out.println("No se encontró ningún resultado para el ID: " + id);
	            return Optional.empty();
	        }
	    }


   

	public Producto obtenerPorId(Long id_producto) {
	    String sql = "SELECT * FROM producto WHERE id_producto = ?";
	    try {
	        System.out.println("Ejecutando query para obtener producto por ID: " + id_producto);
	        return template.queryForObject(sql, new Object[]{id_producto}, (rs, rowNum) -> {
	            Producto producto = new Producto();
	            producto.setId_producto(rs.getLong("id_producto"));
	            producto.setNombre(rs.getString("nombre"));
	            producto.setCantidad(rs.getInt("cantidad"));
	            producto.setCantidad_total(rs.getInt("cantidad_total"));
	            System.out.println("Producto encontrado: " + producto.toString());
	            return producto;
	        });
	    } catch (EmptyResultDataAccessException e) {
	        System.out.println("No se encontró ningún resultado para el ID: " + id_producto);
	        return null;
	    } }

}
