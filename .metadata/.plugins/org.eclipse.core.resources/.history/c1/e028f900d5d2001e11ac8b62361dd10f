package com.AppConvert.backAppConvert.service;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.AppConvert.backAppConvert.interfaces.ProductoInterface;
import com.AppConvert.backAppConvert.modelo.Producto;
import com.AppConvert.backAppConvert.modeloDAO.ProductoDAO;

@Service
public class ProductoService implements ProductoInterface{
	
	 @Autowired
	 private ProductoDAO productoDao;
	    
	 @Transactional
	 public Producto sumarCantidadYActualizarTotal(Long id_producto, int cantidad) {
	     // Obtener el producto por su ID
	     Optional<Producto> optionalProducto = productoDao.findById(id_producto);

	     if (optionalProducto.isPresent()) {
	         // El producto existe, realizar operaciones
	         Producto producto = optionalProducto.get();
	         
	         // Actualizar la cantidad y el total
	         producto.setCantidad(producto.getCantidad() + cantidad);

	         // Verificar si el método getCantidadTotal() no es nulo antes de llamarlo
	         if (producto.getCantidadTotal() != null) {
	             // Convertir la cantidadTotal a int, sumar la cantidad y luego convertir de nuevo a String
	             int cantidadTotal = Integer.parseInt(producto.getCantidadTotal()) + cantidad;
	             producto.setCantidadTotal(String.valueOf(cantidadTotal));
	         } else {
	             // Si getCantidadTotal() es nulo, asigna la cantidad directamente como String
	             producto.setCantidadTotal(String.valueOf(cantidad));
	         }

	         // Guardar el producto actualizado
	         return productoDao.save(producto);
	     } else {
	         // El producto no existe, puedes manejarlo según tus necesidades
	         throw new RuntimeException("Producto no encontrado");
	     }
	 }

		/*public Producto sumarCantidadYActualizarTotal(int id_producto, int cantidad) {
	    	Producto producto = (Producto) productoDao.findById(id_producto);

	    		producto.setCantidadTotal(producto.getCantidadTotal() + cantidad);

	    		return productoDao.save(producto);
		}*/
	   /* public Producto sumarCantidadYActualizar(int id_producto, int cantidad) {
	        Producto producto = (Producto) productoDao.findById(id_producto);
	                .orElseThrow(RuntimeException::new);

	      
	        producto.setCantidad(producto.getCantidad() + cantidad);

	        return productoDao.save(producto);
	    }*/
	
	

	public List<Map<String, Object>> listar() {
		// TODO Auto-generated method stub
		return productoDao.listar();
	}

	public int add(Producto p) {
		return productoDao.add(p);
	}

	public int edit(Producto p) {
		return productoDao.edit(p);
	}

	public int delete(int id_producto) {
		return productoDao.delete(id_producto);
	}

	@Override
	public List<Map<String, Object>> listarId(int id_usuario) {
		// TODO Auto-generated method stub
		return productoDao.listarId(id_usuario);
	}

	@Override
	public Optional<Producto> findById(Long id) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}


	

}
