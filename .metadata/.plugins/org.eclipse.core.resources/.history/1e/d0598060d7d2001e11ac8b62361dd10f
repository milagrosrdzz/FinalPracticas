package com.AppConvert.backAppConvert.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.AppConvert.backAppConvert.modelo.Producto;
import com.AppConvert.backAppConvert.service.ProductoService;

@RestController
@RequestMapping(path ="usuarios/productos")
public class ProductoController {
	
	@Autowired
	ProductoService productoService;
    private static final Logger logger = LoggerFactory.getLogger(ProductoController.class);

	
	@GetMapping("/listar")
	public List<Map<String, Object>> listar() {
		return productoService.listar();
	}
	
		
	@PostMapping("/agregarNuevo")
	public String save(@RequestBody Producto p,Model model) {
		int id_producto=productoService.add(p);
		if(id_producto==0) {
			return "No se pudo agregar el producto!";
		}
		return "Se registró con éxito!";
	}
	
	   
	
	@PostMapping("/actualizar/{id_producto}")
	public String save(@RequestBody Producto p,@PathVariable int id_producto,Model model) {
		p.setId_producto(id_producto);
		int r=productoService.edit(p);
		if(r==0) {
			return "No se pudo actualizar el id!";
		}
		return "Se actualizó con éxito!";
	}
	
	/*@PostMapping("/{id}/sumar-cantidad")
	public ResponseEntity<?> sumarCantidad(@PathVariable Long id, @RequestBody Map<String, String> requestBody) {
	    try {
	        // Agregar logs para verificar el valor del ID y otros parámetros
	        logger.info("ID proporcionado en la solicitud: {}", id);

	        Producto producto = productoService.sumarCantidadYActualizarTotal(id, Integer.parseInt(requestBody.get("cantidad")));
	        return new ResponseEntity<>(producto, HttpStatus.OK);
	    } catch (RuntimeException e) {
	        return new ResponseEntity<>("Error al procesar la solicitud: " + e.getMessage(), HttpStatus.BAD_REQUEST);
	    }
	}*/
	@PostMapping("/{id}/sumar-cantidad")
	public ResponseEntity<?> sumarCantidad(@PathVariable Long id, @RequestBody Map<String, String> requestBody) {
	    try {
	        // Agregar logs para verificar el valor del ID y otros parámetros
	        logger.info("ID proporcionado en la solicitud: {}", id);

	        Producto producto = productoService.obtenerPorId(id);
	        
	        if (producto == null) {
	            return new ResponseEntity<>("Error: Producto no encontrado con ID: " + id, HttpStatus.NOT_FOUND);
	        }

	        producto = productoService.sumarCantidadYActualizarTotal(id, Integer.parseInt(requestBody.get("cantidad")));
	        return new ResponseEntity<>(producto, HttpStatus.OK);
	    } catch (RuntimeException e) {
	        return new ResponseEntity<>("Error al procesar la solicitud: " + e.getMessage(), HttpStatus.BAD_REQUEST);
	    }
	}
	
    

	
	@PostMapping("/eliminar/{id_producto}")
	public String delete(@PathVariable int id_producto,Model model) {
		int r=productoService.delete(id_producto);
		if(r==0) {
			return "Registro No Eliminado!";
		}
		return "Registro Eliminado!";
	}

}
